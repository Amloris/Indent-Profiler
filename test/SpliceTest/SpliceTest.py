# -*- coding: utf-8 -*-
#!/usr/bin/env python

"""
Indent Profiler: Splice Testing
-------------------------------------------------------------------------------
Aaron Robertson
FRA
March 2018
-------------------------------------------------------------------------------
Program Description:
    Graphically displays multi-segmented raw scans located in a user specified
    directory.
Usage:
    
-------------------------------------------------------------------------------
"""


#Libraries
import numpy as np
import matplotlib.pyplot
import os
from Tkinter import Tk
import tkFileDialog


def main():
    
    Tk().withdraw()    #Hide window
    
    #Load Raw Data
    dir_name = GetDir()                            #User selected directory    
    if VerifyFileNames(dir_name) == 1: return 0    #Verify file names
    if VerifyFileIntegrity(dir_name) == 1: return 0    #Verify file names
    
    print sorted(os.listdir(dir_name))


    #Slice Data







'''Functions'''
'''-------------------------------------------------------------------------'''
def GetDir():
    #Get directory
    print "Select a data directory:"
    dir_name = str((tkFileDialog.askdirectory(initialdir="/home/aaron", title = 'Select Scan Directory')) or "/home/aaron/Documents/Github_Projects/Indent-Profiler/data/system_scans/raw/scans_wire/2018_3_23/WB")
    dir_name = os.path.normpath(dir_name)
    print dir_name, '\n'
    
    return dir_name

def VerifyFileNames(dir_name):
    '''Verfies that the files follow the documented naming conventions.
    
       Input:
           dir_name = The absolute path to the directory [str]
    '''
    
    #Get Parent Directory
    dir_parent = os.path.basename(dir_name)
    
    #Check Naming and Extensions
    print "Verifying Files: "
    
    file_list = os.listdir(dir_name)       #Files contained in the directory
    if len(file_list) == 0:
        print "ERROR: No Files in Selected Directory"
        return 1
    
    flag = 0
    success = 0
    for i in range(1,len(file_list)+1):
        check_fname = dir_parent+'_'+str(i)    #Expected file w/o extension
        if ((check_fname+'.csv') in file_list) or ((check_fname+'.txt') in file_list):
            success += 1
        else:
            print "ERROR: File Not Found (%s)" %check_fname
            flag = 1
    
    if flag == 1:
        print "Invalid or Missing Files. Check Documentation."
        return 1
    else:
        print "Passed (%i)" %success
        return 0

def VerifyFileIntegrity(dir_name):
    '''Verifies that the raw data files are structured correctly.

       Input:
           dir_name = The absolute path to the directory [str]        
    '''
    
    #Get Parent Directory
    dir_parent = os.path.basename(dir_name)
    
    #Check Naming and Extensions
    file_list = sorted(os.listdir(dir_name))
    
    #Add this later if needed
    

    return 0
    
def LoadData(fname):
    '''Load data from a text file or csv file generated by the indent profiler.

       Inputs:
           fname = The relative path to the data file.
                   The extension of the data file must be '.txt' or '.csv'.
       Outputs:
           data      = A [nxm] array of floating point numbers.
           scan_info = The header info of the data file, stored as a struct.
    '''

    cols_expected = 800       #Number of axial data points for the scanner

    #Set Extension
    filename, file_ext = os.path.splitext(fname)
    if (file_ext == '.txt'):
        delim = None
    elif (file_ext == '.csv'):
        delim = ','
    else:
        print "ERROR: File Extension Requirement Not Met"
        return 0

    #Load Header
    header_length = 6
    header_index = np.arange(0, header_length)    #The rows which contain heade

    with open(fname,'r') as fin:
        for i, line in enumerate(fin):
            if i in header_index:
                line_val = line.strip().split(delim)[-1]
                if i == 0:
                    wire_profile     = str(line_val)
                if i == 1:
                    x_location       = float(line_val)
                if i == 2:
                    total_sample_len = float(line_val)
                if i == 3:
                    pts_per_rev      = int(line_val)
                if i == 4:
                    data_state       = str(line_val)
                if i == 5:
                    time_stamp       = str(line_val)

    scan_info = ScanInfo(wire_profile, x_location, total_sample_len, \
                         pts_per_rev, data_state, time_stamp)

    #Load Data
    data = np.loadtxt(fname, delimiter=delim, skiprows=header_length)

	#Check Data Validity
    if (np.shape(data)[0]!=scan_info.pts_per_rev) or (np.shape(data)[1]!=800):
        if np.shape(data)[0]!=scan_info.pts_per_rev:
            print "ERROR: Expected %i rows, got %i rows" \
                  %(scan_info.pts_per_rev, np.shape(data)[0])
        else:
            print "ERROR: Expected %i cols, got %i cols" \
                  %(cols_expected, np.shape(data)[1])
        return 0
    else:
        return data, scan_info

class ScanInfo():
    def __init__(self, wire_profile, x_location, total_sample_length,
				 pts_per_rev, data_state, time_stamp):
        self.wire_profile = wire_profile
        self.x_location = x_location
        self.total_sample_length = total_sample_length
        self.pts_per_rev = pts_per_rev
        self.data_state = data_state
        self.time_stamp = time_stamp
        

'''Math Functions'''
'''-------------------------------------------------------------------------'''


if __name__ == "__main__":
    main()